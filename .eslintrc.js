module.exports = {
    root: true,
    extends: [
        'eslint:recommended',
        'eslint:all',
        'plugin:react/recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:import/errors',
        'plugin:import/warnings',
        'plugin:import/typescript',
    ],
    env: {
        browser: true,
        es6: true,
        node: true,
    },
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaFeatures: {
            jsx: true,
        },
        ecmaVersion: 2018,
        sourceType: 'module',
        project: ['./tsconfig.json'],
    },
    plugins: ['@typescript-eslint', 'react', 'promise', 'jsdoc', 'react-hooks', 'import'],
    rules: {
        '@typescript-eslint/array-type': [
            'error',
            {
                default: 'array-simple',
                readonly: 'generic',
            },
        ],
        '@typescript-eslint/camelcase': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/explicit-member-accessibility': 'error',
        // This is handled by prettier
        '@typescript-eslint/indent': 'off',
        '@typescript-eslint/member-ordering': [
            'error',
            {
                default: [
                    'public-static-field',
                    'protected-static-field',
                    'private-static-field',
                    'public-instance-field',
                    'protected-instance-field',
                    'private-instance-field',
                    'public-constructor',
                    'protected-constructor',
                    'private-constructor',
                    'public-instance-method',
                    'protected-instance-method',
                    'private-instance-method',
                ],
            },
        ],
        '@typescript-eslint/no-empty-function': ['error'],
        '@typescript-eslint/no-empty-interface': [
            'error',
            {
                allowSingleExtends: true,
            },
        ],
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-extra-parens': [
            'error',
            'all',
            {
                ignoreJSX: 'all',
                nestedBinaryExpressions: false,
            },
        ],
        '@typescript-eslint/no-namespace': 'off',
        '@typescript-eslint/no-non-null-assertion': 'off',
        '@typescript-eslint/no-object-literal-type-assertion': 'off',
        '@typescript-eslint/no-parameter-properties': 'off',
        '@typescript-eslint/no-unused-vars': [
            'error',
            {
                args: 'none',
                ignoreRestSiblings: false,
                vars: 'all',
            },
        ],
        '@typescript-eslint/no-use-before-define': [
            'error',
            {
                classes: false,
                functions: false,
                typedefs: false,
                variables: true,
            },
        ],
        '@typescript-eslint/no-useless-constructor': 'error',
        '@typescript-eslint/prefer-interface': 'off',
        '@typescript-eslint/promise-function-async': [
            'error',
            {
                allowedPromiseNames: ['Thenable'],
                checkArrowFunctions: true,
                checkFunctionDeclarations: true,
                checkFunctionExpressions: true,
                checkMethodDeclarations: true,
            },
        ],
        '@typescript-eslint/require-await': 'error',
        '@typescript-eslint/no-misused-promises': [
            'error',
            {
                checksVoidReturn: false,
            },
        ],
        '@typescript-eslint/triple-slash-reference': 'off',
        'require-await': 'off',
        'array-bracket-newline': ['error', 'consistent'],
        'array-element-newline': ['error', 'consistent'],
        'arrow-body-style': ['error', 'as-needed'],
        'arrow-parens': ['error', 'as-needed'],
        'brace-style': [
            'error',
            '1tbs',
            {
                allowSingleLine: false,
            },
        ],
        'callback-return': 'off',
        'capitalized-comments': ['error', 'always', { ignorePattern: 'language=|webpack' }],
        'class-methods-use-this': 'off',
        'comma-dangle': ['error', 'always-multiline'],
        complexity: ['error', 20],
        'consistent-return': 'error',
        'consistent-this': ['error', 'self'],
        curly: ['error', 'all'],
        'default-case': 'error',
        'dot-location': ['error', 'property'],
        eqeqeq: 'error',
        'func-style': 'off',
        // This is handled by prettier
        'function-call-argument-newline': 'off',
        // This is handled by prettier
        'function-paren-newline': 'off',
        'guard-for-in': 'error',
        'id-length': [
            'error',
            {
                exceptions: ['$', 'i', '_', '__', 'x', 'y'],
            },
        ],
        'implicit-arrow-linebreak': 'off',
        // This doesn't play nicely with webpack/typescript aliases
        'import/no-unresolved': 'off',
        'import/order': 'error',
        // This is handled by prettier
        indent: 'off',
        'init-declarations': 'off',
        'jsdoc/check-alignment': 'error',
        'jsdoc/check-examples': 'off',
        'jsdoc/check-indentation': 'off',
        'jsdoc/check-param-names': 'error',
        'jsdoc/check-syntax': 'error',
        'jsdoc/check-tag-names': 'error',
        'jsdoc/check-types': 'off',
        'jsdoc/newline-after-description': 'error',
        'jsdoc/no-undefined-types': 'error',
        'jsdoc/require-description': 'off',
        'jsdoc/require-description-complete-sentence': 'off',
        'jsdoc/require-example': 'off',
        'jsdoc/require-hyphen-before-param-description': 'error',
        'jsdoc/require-param': 'error',
        'jsdoc/require-param-description': 'error',
        'jsdoc/require-param-name': 'error',
        'jsdoc/require-param-type': 'off',
        'jsdoc/require-returns': 'error',
        'jsdoc/require-returns-check': 'error',
        'jsdoc/require-returns-description': 'error',
        'jsdoc/require-returns-type': 'off',
        'jsdoc/valid-types': 'error',
        'line-comment-position': 'off',
        'linebreak-style': 'off',
        'lines-around-comment': 'off',
        'lines-between-class-members': ['error', 'always'],
        'max-classes-per-file': 'off',
        'max-depth': ['error', 5],
        'max-len': [
            'error',
            {
                code: 120,
                ignoreUrls: true,
            },
        ],
        'max-lines': [
            'warn',
            {
                max: 500,
                skipBlankLines: true,
                skipComments: true,
            },
        ],
        'max-lines-per-function': [
            'error',
            {
                max: 100,
                skipBlankLines: true,
                skipComments: true,
            },
        ],
        'max-nested-callbacks': [
            'error',
            {
                max: 5,
            },
        ],
        'max-params': [
            'error',
            {
                max: 5,
            },
        ],
        'max-statements': ['error', 20],
        'multiline-comment-style': 'off',
        'multiline-ternary': ['error', 'always-multiline'],
        'new-cap': 'off',
        'no-await-in-loop': 'error',
        'no-bitwise': 'error',
        'no-confusing-arrow': 'off',
        // This is handled by TSC
        'no-dupe-class-members': 'off',
        'no-duplicate-case': 'error',
        'no-duplicate-imports': 'error',
        'no-else-return': 'off',
        // This is handled by @typescript-eslint/no-empty-function
        'no-empty-function': 'off',
        'no-eval': 'error',
        'no-extra-parens': 'off',
        'no-implicit-coercion': [
            'error',
            {
                allow: ['!!'],
            },
        ],
        'no-implied-eval': 'error',
        'no-inline-comments': 'off',
        'no-labels': 'error',
        'no-loop-func': 'error',
        'no-magic-numbers': 'off',
        'no-mixed-operators': 'off',
        'no-negated-condition': 'off',
        'no-param-reassign': 'error',
        'no-plusplus': 'off',
        'no-restricted-properties': [
            'error',
            {
                message: 'Use the SqlQuery class and add a test to sqlQueriesTest.ts',
                object: 'sequelize',
                property: 'query',
            },
            {
                message: 'Use the SqlQuery class and add a test to sqlQueriesTest.ts',
                object: 'db',
                property: 'query',
            },
            {
                message: 'Use the SqlQuery class and add a test to sqlQueriesTest.ts',
                object: 'query',
                property: 'query',
            },
        ],
        'no-sequences': 'error',
        'no-shadow': 'error',
        'no-shadow-restricted-names': 'error',
        'no-template-curly-in-string': 'error',
        'no-ternary': 'off',
        'no-trailing-spaces': 'error',
        'no-undefined': 'off',
        'no-underscore-dangle': 'off',
        'no-unmodified-loop-condition': 'error',
        'no-unused-expressions': 'error',
        // This is handled by @typescript-eslint/no-unused-vars
        'no-unused-vars': 'off',
        'no-use-before-define': [
            'error',
            {
                classes: false,
                functions: false,
                variables: true,
            },
        ],
        'no-useless-constructor': 'off',
        'no-warning-comments': 'warn',
        'object-curly-newline': [
            'error',
            {
                consistent: true,
            },
        ],
        'object-curly-spacing': ['error', 'always'],
        'object-property-newline': [
            'error',
            {
                allowAllPropertiesOnSameLine: true,
            },
        ],
        'one-var': ['error', 'never'],
        'padded-blocks': 'off',
        'prefer-const': 'error',
        'prefer-destructuring': 'off',
        'prefer-named-capture-group': 'off',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        'promise/always-return': 'off',
        'promise/avoid-new': 'off',
        'promise/catch-or-return': 'error',
        'promise/no-callback-in-promise': 'error',
        'promise/no-native': 'off',
        'promise/no-nesting': 'error',
        'promise/no-new-statics': 'error',
        'promise/no-promise-in-callback': 'error',
        'promise/no-return-in-finally': 'error',
        'promise/no-return-wrap': 'error',
        'promise/param-names': 'error',
        'promise/valid-params': 'off',
        'quote-props': 'off',
        quotes: ['error', 'single'],
        radix: 'error',
        'react-hooks/exhaustive-deps': 'error',
        'react-hooks/rules-of-hooks': 'error',
        'react/jsx-no-literals': 'off',
        'react/prefer-stateless-function': [
            'error',
            {
                ignorePureComponents: true,
            },
        ],
        'react/prop-types': 'off',
        'require-atomic-updates': 'warn',
        'require-unicode-regexp': 'off',
        'sort-imports': 'off',
        'sort-keys': 'error',
        'space-before-function-paren': [
            'error',
            {
                anonymous: 'always',
                asyncArrow: 'always',
                named: 'never',
            },
        ],
        'spaced-comment': ['error', 'always', { markers: ['/'] }],
        'switch-colon-spacing': 'error',
        'template-curly-spacing': ['warn', 'never'],
        'wrap-iife': ['error', 'inside'],
    },
};
